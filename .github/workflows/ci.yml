name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.compiler }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        # Temporarily disable Ubuntu/macOS to focus on Windows debugging
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [windows-latest]
        # compiler: [gcc, clang]
        compiler: [msvc]
        build_type: [Release, Debug]
        # exclude:
        #   # macOS doesn't have gcc (uses Apple Clang)
        #   - os: macos-latest
        #     compiler: gcc
        #   # Windows: use MSVC and clang-cl, not gcc/clang directly
        #   - os: windows-latest
        #     compiler: gcc
        #   - os: windows-latest
        #     compiler: clang
        # include:
        #   # Add Windows with MSVC
        #   - os: windows-latest
        #     compiler: msvc
        #     build_type: Release
        #   - os: windows-latest
        #     compiler: msvc
        #     build_type: Debug
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Set compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "msvc" ]; then
          # MSVC is the default on Windows, no need to set CC
          echo "Using MSVC (default on Windows)"
        fi
      shell: bash
    
    - name: Configure CMake
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows with MSVC - GIL tests now supported with test_portability.h
          # Other tests (qtest, strongtest) still need pthread, so skip those
          cmake -B build \
                -G "Visual Studio 17 2022" \
                -DFASTCOND_BUILD_TESTS=ON \
                -DFASTCOND_BUILD_BENCHMARKS=OFF
        else
          # Unix-like systems - specify compiler and build type
          cmake -B build \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
                -DFASTCOND_BUILD_TESTS=ON \
                -DFASTCOND_BUILD_BENCHMARKS=ON
        fi
      shell: bash
    
    - name: Build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cmake --build build --config ${{ matrix.build_type }} --parallel
        else
          cmake --build build --config ${{ matrix.build_type }} -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
        fi
      shell: bash
    
    - name: Run tests
      run: |
        cd build
        if [ "${{ runner.os }}" = "Windows" ]; then
          # On Windows, run debug tests first
          echo "=== Running atomic operations test ==="
          ./${{ matrix.build_type }}/test_atomics.exe
          echo ""
          echo "=== Running native condition variable test ==="
          ./${{ matrix.build_type }}/test_native_cond.exe
          echo ""
          echo "=== Running minimal GIL mutual exclusion test ==="
          ./${{ matrix.build_type }}/test_gil_exclusion_native.exe
          ./${{ matrix.build_type }}/test_gil_exclusion_fc.exe
          echo ""
          
          echo "=== Running GIL tests on Windows with native CONDITION_VARIABLE ==="
          ./${{ matrix.build_type }}/gil_test_native.exe 4 1000
          echo ""
          echo "=== Running GIL tests with fastcond ==="
          ./${{ matrix.build_type }}/gil_test_fc.exe 4 1000
          echo ""
          
          echo "=== Running qtest/strongtest ==="
          ./${{ matrix.build_type }}/qtest_fc.exe 10000 4 10
          ./${{ matrix.build_type }}/qtest_wcond.exe 10000 4 10
          ./${{ matrix.build_type }}/strongtest_fc.exe 10000 5
        else
          # On POSIX systems, run full test suite via CTest
          ctest --output-on-failure --build-config ${{ matrix.build_type }}
        fi
      shell: bash
    


  # Temporarily disabled to focus on Windows debugging
  # sanitizers:
  #   name: ${{ matrix.sanitizer }} sanitizer
  #   runs-on: ubuntu-latest
  #   
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       sanitizer: [address, thread, undefined]
  #       # AddressSanitizer (ASan): Detects memory errors like buffer overflows,
  #       #   use-after-free, double-free, and memory leaks
  #       # ThreadSanitizer (TSan): Detects data races and other threading issues
  #       #   Critical for this library as it's designed for concurrent use
  #       # UndefinedBehaviorSanitizer (UBSan): Detects undefined behavior like
  #       #   integer overflow, null pointer dereference, misaligned access
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Install dependencies
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y clang cmake
  #   
  #   - name: Configure with sanitizer
  #     run: |
  #       cmake -B build-${{ matrix.sanitizer }} \
  #             -DCMAKE_C_COMPILER=clang \
  #             -DCMAKE_BUILD_TYPE=Debug \
  #             -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
  #             -DFASTCOND_BUILD_TESTS=ON
  #   
  #   - name: Build
  #     run: cmake --build build-${{ matrix.sanitizer }} -j$(nproc)
  #   
  #   - name: Run tests with sanitizer
  #     run: |
  #       cd build-${{ matrix.sanitizer }}
  #       ctest --output-on-failure
  #     env:
  #       ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1
  #       UBSAN_OPTIONS: print_stacktrace=1

  # Temporarily disabled to focus on Windows debugging
  # static-analysis:
  #   name: Static Analysis
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Install clang-tidy
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y clang-tidy cmake
  #   
  #   - name: Run clang-tidy
  #     run: |
  #       cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
  #       clang-tidy fastcond/*.c -- -I./fastcond

  # Temporarily disabled to focus on Windows debugging
  # format-check:
  #   name: Code Formatting Check
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Install clang-format
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y clang-format
  #   
  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v5
  #     with:
  #       enable-cache: true
  #   
  #   - name: Check C code formatting
  #     run: |
  #       find fastcond test -name "*.c" -o -name "*.h" | xargs clang-format -n -Werror
  #   
  #   - name: Check Python code formatting
  #     run: |
  #       uvx ruff format --check scripts/
  #   
  #   - name: Lint Python code
  #     run: |
  #       uvx ruff check scripts/
