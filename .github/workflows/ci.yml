name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        build_type: [Release, Debug]
        exclude:
          # macOS doesn't have gcc, uses clang anyway
          - os: macos-latest
            compiler: gcc
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Set compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
        fi
    
    - name: Configure CMake
      run: |
        cmake -B build \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
              -DFASTCOND_BUILD_TESTS=ON \
              -DFASTCOND_BUILD_BENCHMARKS=ON
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --build-config ${{ matrix.build_type }}
    
    - name: Run benchmarks (Release only)
      if: matrix.build_type == 'Release'
      run: cmake --build build --target benchmark

  sanitizers:
    name: Sanitizers (Ubuntu + Clang)
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, thread, undefined]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake
    
    - name: Configure with sanitizer
      run: |
        cmake -B build-${{ matrix.sanitizer }} \
              -DCMAKE_C_COMPILER=clang \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
              -DFASTCOND_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build-${{ matrix.sanitizer }} -j$(nproc)
    
    - name: Run tests with sanitizer
      run: |
        cd build-${{ matrix.sanitizer }}
        ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1
        UBSAN_OPTIONS: print_stacktrace=1

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-tidy
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy cmake
    
    - name: Run clang-tidy
      run: |
        cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        clang-tidy fastcond/*.c -- -I./fastcond

  format-check:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
    
    - name: Check formatting
      run: |
        find fastcond test -name "*.c" -o -name "*.h" | xargs clang-format -n -Werror
