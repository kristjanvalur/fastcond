name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3

permissions:
  contents: write  # Required for creating releases

jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Validate version tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        echo "📦 Creating release for $TAG"
        
        # Validate semantic versioning format
        if ! [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
          echo "❌ Invalid version tag format: $TAG"
          echo "Expected format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi

    - name: Create source distribution archives
      id: dist
      run: |
        VERSION=${{ steps.version.outputs.version }}
        TAG=${{ steps.version.outputs.tag }}
        DIST_NAME="fastcond-${VERSION}"
        
        echo "🏗️  Creating distribution archives for ${DIST_NAME}..."
        
        # Create distribution directory with library files
        mkdir -p "${DIST_NAME}"
        
        # Copy essential library files
        cp fastcond/fastcond.h "${DIST_NAME}/"
        cp fastcond/fastcond.c "${DIST_NAME}/"
        cp fastcond/fastcond_patch.h "${DIST_NAME}/"
        cp License.md "${DIST_NAME}/"
        cp README.md "${DIST_NAME}/"
        
        # Create integration instructions
        cat > "${DIST_NAME}/INTEGRATION.md" << 'EOF'
        # fastcond Integration Guide
        
        ## Quick Start
        
        To integrate fastcond into your project:
        
        1. Copy the library files to your source tree:
           ```
           cp fastcond.h fastcond.c fastcond_patch.h /path/to/your/project/
           ```
        
        2. Add `fastcond.c` to your build system
        
        3. Include the header in your code:
           ```c
           #include "fastcond.h"
           ```
        
        ## Drop-in pthread Replacement
        
        For existing code using `pthread_cond_t`, use the patch header:
        
        ```c
        #define FASTCOND_PATCH_COND    // Use fastcond implementation
        
        #include "fastcond_patch.h"    // Before any pthread includes
        ```
        
        This automatically replaces `pthread_cond_*` calls with `fastcond_*`.
        
        **Note:** Both `fastcond_cond_t` and the legacy `fastcond_wcond_t` now provide 
        strong POSIX semantics. The wcond API is kept for backward compatibility only.
        
        See README.md for detailed explanation and benchmarks.
        
        ## License
        
        MIT License - see License.md
        EOF
        
        # Create tar.gz archive
        tar -czf "${DIST_NAME}.tar.gz" "${DIST_NAME}"
        echo "✅ Created ${DIST_NAME}.tar.gz ($(du -h ${DIST_NAME}.tar.gz | cut -f1))"
        
        # Create zip archive for Windows users
        zip -r -q "${DIST_NAME}.zip" "${DIST_NAME}"
        echo "✅ Created ${DIST_NAME}.zip ($(du -h ${DIST_NAME}.zip | cut -f1))"
        
        # Calculate checksums
        sha256sum "${DIST_NAME}.tar.gz" > "${DIST_NAME}.tar.gz.sha256"
        sha256sum "${DIST_NAME}.zip" > "${DIST_NAME}.zip.sha256"
        
        echo "📋 Checksums:"
        cat "${DIST_NAME}.tar.gz.sha256"
        cat "${DIST_NAME}.zip.sha256"
        
        # Export for release notes
        echo "dist_name=${DIST_NAME}" >> $GITHUB_OUTPUT
        echo "tarball=${DIST_NAME}.tar.gz" >> $GITHUB_OUTPUT
        echo "zipfile=${DIST_NAME}.zip" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      run: |
        TAG=${{ steps.version.outputs.tag }}
        VERSION=${{ steps.version.outputs.version }}
        echo "📝 Extracting changelog for ${VERSION} from CHANGELOG.md..."
        
        # Extract the section for this version from CHANGELOG.md
        # Format: ## [0.2.0] - 2025-10-26
        awk -v version="$VERSION" '
          /^## \[/ {
            if (found) exit;
            if ($0 ~ "\\[" version "\\]") {
              found=1;
              next;
            }
          }
          found && /^## \[/ { exit }
          found { print }
        ' CHANGELOG.md > EXTRACTED_CHANGELOG.md
        
        if [ ! -s EXTRACTED_CHANGELOG.md ]; then
          echo "⚠️  No changelog entry found for version ${VERSION}"
          echo "📝 Creating generic changelog message..."
          echo "Release ${VERSION}" > EXTRACTED_CHANGELOG.md
          echo "" >> EXTRACTED_CHANGELOG.MD
          echo "See [CHANGELOG.md](https://github.com/kristjanvalur/fastcond/blob/master/CHANGELOG.md) for details." >> EXTRACTED_CHANGELOG.md
        else
          echo "✅ Found changelog entry for ${VERSION}"
        fi
        
        echo "📄 Extracted changelog:"
        cat EXTRACTED_CHANGELOG.md
        
        # Export changelog for release body (GitHub Actions multiline output)
        {
          echo 'changelog<<EOF_CHANGELOG'
          cat EXTRACTED_CHANGELOG.md
          echo 'EOF_CHANGELOG'
        } >> $GITHUB_OUTPUT

    - name: Create release notes
      id: notes
      run: |
        TAG=${{ steps.version.outputs.tag }}
        VERSION=${{ steps.version.outputs.version }}
        DIST_NAME=${{ steps.dist.outputs.dist_name }}
        
        cat > RELEASE_NOTES.md << EOF
        # fastcond ${VERSION}
        
        Fast POSIX condition variable alternatives using only semaphores.
        
        ${{ steps.changelog.outputs.changelog }}
        
        ## 📦 Installation
        
        Download and extract the source archive, then copy the library files to your project:
        
        \`\`\`bash
        # Extract archive
        tar -xzf ${DIST_NAME}.tar.gz
        # OR
        unzip ${DIST_NAME}.zip
        
        # Copy to your project
        cp ${DIST_NAME}/*.h ${DIST_NAME}/*.c /path/to/your/project/
        \`\`\`
        
        See \`INTEGRATION.md\` in the archive for detailed integration instructions.
        
        ## 📊 Performance Benchmarks
        
        View comprehensive performance analysis and GIL fairness benchmarks:
        - [Performance Benchmarks](https://kristjanvalur.github.io/fastcond/)
        - [GIL Fairness Analysis](https://kristjanvalur.github.io/fastcond/gil-fairness.html)
        
        ## 🔍 Verification
        
        Verify archive integrity using SHA256 checksums:
        
        \`\`\`bash
        sha256sum -c ${DIST_NAME}.tar.gz.sha256
        sha256sum -c ${DIST_NAME}.zip.sha256
        \`\`\`
        
        **Checksums:**
        \`\`\`
        $(cat ${DIST_NAME}.tar.gz.sha256)
        $(cat ${DIST_NAME}.zip.sha256)
        \`\`\`
        
        ## 📄 License
        
        MIT License - see [License.md](https://github.com/kristjanvalur/fastcond/blob/master/License.md)
        
        ## 🐛 Issues & Support
        
        Report issues or request features: [GitHub Issues](https://github.com/kristjanvalur/fastcond/issues)
        EOF
        
        echo "📝 Release notes preview:"
        cat RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: fastcond ${{ steps.version.outputs.version }}
        body_path: RELEASE_NOTES.md
        files: |
          ${{ steps.dist.outputs.tarball }}
          ${{ steps.dist.outputs.tarball }}.sha256
          ${{ steps.dist.outputs.zipfile }}
          ${{ steps.dist.outputs.zipfile }}.sha256
        draft: false
        prerelease: ${{ contains(steps.version.outputs.tag, '-') }}
        fail_on_unmatched_files: true

    - name: Release summary
      run: |
        TAG=${{ steps.version.outputs.tag }}
        echo "🎉 Release ${TAG} created successfully!"
        echo "📦 Artifacts:"
        echo "  - ${{ steps.dist.outputs.tarball }}"
        echo "  - ${{ steps.dist.outputs.zipfile }}"
        echo "  - SHA256 checksums"
        echo ""
        echo "🔗 View release: https://github.com/${{ github.repository }}/releases/tag/${TAG}"
